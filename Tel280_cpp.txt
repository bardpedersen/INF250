#include <iostream>


bool check_if_box_is_empty(int shape_boks, bool binary[][])
{
    bool answer = false;
    for(int i = shape_boks[0][0]; i < shape_boks[0][1]; i++)
    {
        for(int j = shape_boks[1][0]; j < shape_boks[1][1]; j++)
        {
            if (not binary[i][j]);
            {
                answer = true;
            }
        }
    }
    return answer;
}


int split_in_four(float shape_x, float shape_y, float shape_nr, bool binary[][])
{   
    /*Need to set the binary loaction to false*/
    binary[int((shape_x[1] + shape_x[0]) / 2), int(shape_y[0]):int(shape_y[1])] = {false};
    binary[int(shape_x[0]):int(shape_x[1]), int((shape_y[1] + shape_y[0]) / 2)] = {false};

    /*Need to update the shapes, divide into right size, with start, end , x, y tuples*/
    float shape1 = (shape_x[0], (shape_x[1] + shape_x[0]) / 2), (shape_y[0], (shape_y[1] + shape_y[0]) / 2), shape_nr;
    float shape2 = (shape_x[0], (shape_x[1] + shape_x[0]) / 2), ((shape_y[1] + shape_y[0]) / 2, shape_y[1]), shape_nr;
    float shape3 = ((shape_x[1] + shape_x[0]) / 2, shape_x[1]), (shape_y[0], (shape_y[1] + shape_y[0]) / 2), shape_nr
    float shape4 = ((shape_x[1] + shape_x[0]) / 2, shape_x[1]), ((shape_y[1] + shape_y[0]) / 2, shape_y[1]), shape_nr

    return shape1, shape2, shape3, shape4
}

bool main_function(float shape_main, int i, bool binary)
{
    if (check_if_box_is_empty(shape_main, binary) and (i < shape_main[2]))
    {
        shape_main[2] = shape_main[2] + 1;
        auto [shape1, shape2, shape3, shape4] = split_in_four(shape_main[0], shape_main[1], shape_main[2], bool binary[][]);
        main(shape1, i);
        main(shape2, i);
        main(shape3, i);
        main(shape4, i);

    }
    return binary
}

const int x_length = 10;
const int y_length = 10;

bool binary[x_length][y_length] = {{true, true, true, true, true, true, true, true, true, true},
                        {true, true, true, true, true, true, true, true, true, true},
                        {true, true, true, true, true, true, true, true, true, true},
                        {true, true, true, true, true, true, true, true, true, true},
                        {true, true, true, true, true, true, true, true, true, true},
                        {true, true, true, true, true, true, true, true, true, true},
                        {true, true, true, true, true, true, true, true, true, true},
                        {true, true, true, true, true, true, true, true, true, true},
                        {true, true, true, true, true, true, true, true, true, true},
                        {true, true, true, true, true, true, true, true, true, true}
                        }; /* binary image/matrix */

const float shape_x_direction = (0, x_length);
const float shape_y_direction = (0, y_length);
int shape = (shape_x_direction, shape_y_direction, 0); 
int number_of_splits = 2;
bool binary_new = main_function(shape, number_of_splits, binary);